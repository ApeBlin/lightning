import logging
import sys

from .model import (ArrayField, Command, CompositeField, EnumField,
                    PrimitiveField)

logger = logging.getLogger(__name__)

# The following words need to be changed, otherwise they'd clash with
# built-in keywords.
keywords = ["in", "type"]

# Manual overrides for some of the auto-generated types for paths
overrides = {
    'listpeers.peers[].channels[].state_changes[].old_state': "ChannelState",
    'listpeers.peers[].channels[].state_changes[].new_state': "ChannelState",
    'listpeers.peers[].channels[].state_changes[].cause': "ChannelStateChangeCause",
}

# A map of schema type to rust primitive types.
typemap = {
    'boolean': 'bool',
    'hex': 'String',
    'msat': 'Amount',
    'number': 'i64',
    'pubkey': 'String',
    'short_channel_id': 'String',
    'signature': 'String',
    'string': 'String',
    'txid': 'String',
}

header = f"""#![allow(non_camel_case_types)]
//! This file was automatically generated using the following command:
//!
//! ```bash
//! {" ".join(sys.argv)}
//! ```
//!
//! Do not edit this file, it'll be overwritten. Rather edit the schema that
//! this file was generated from

#[allow(unused_imports)]
use crate::primitives::*;
use serde::{{Deserialize, Serialize}};

"""


def normalize_varname(field):
    """Make sure that the variable name of this field is valid.
    """
    # Dashes are not valid names
    field.path = field.path.replace("-", "_")
    return field


def gen_field(field):
    if isinstance(field, Command):
        return gen_command(field)
    elif isinstance(field, CompositeField):
        return gen_composite(field)
    elif isinstance(field, EnumField):
        return gen_enum(field)
    elif isinstance(field, ArrayField):
        return gen_array(field)
    elif isinstance(field, PrimitiveField):
        return gen_primitive(field)
    else:
        raise ValueError(f"Unmanaged type {field}")


def gen_enum(e):
    defi, decl = "", ""

    if e.description != "":
        decl += f"/// {e.description}\n"

    decl += f"#[derive(Clone, Debug, Deserialize, Serialize)]\n#[serde(rename_all = \"lowercase\")]\npub enum {e.typename} {{\n"
    for v in e.values:
        if v is None:
            continue
        norm = v.upper().replace(' ', '_')

        decl += f"    {norm},\n"
    decl += "}\n\n"

    name = e.name if e.name not in keywords else f"_{e.name}"
    typename = e.typename

    if e.path in overrides:
        decl = ""  # No declaration if we have an override
        typename = overrides[e.path]

    if e.required:
        defi = f"    // Path `{e.path}`\n    #[serde(rename = \"{e.name}\")]\n    pub {name}: {typename},\n"
    else:
        defi = f"    pub {name}: Option<{typename}>,\n"

    return defi, decl


def gen_primitive(p):
    defi, decl = "", ""
    name = p.name.split(".")[-1]
    typename = typemap.get(p.typename, p.typename)
    normalize_varname(p)

    if p.required:
        defi = f"    #[serde(alias = \"{name}\")]\n    pub {p.name}: {typename},\n"
    else:
        defi = f"    #[serde(alias = \"{name}\")]\n    pub {p.name}: Option<{typename}>,\n"

    return defi, decl


def gen_array(a):
    name = a.name.replace("[]", "")
    logger.debug(f"Generating array field {a.name} -> {name} ({a.path})")

    _, decl = gen_field(a.itemtype)

    if isinstance(a.itemtype, PrimitiveField):
        itemtype = a.itemtype.typename
    elif isinstance(a.itemtype, CompositeField):
        itemtype = a.itemtype.typename
    elif isinstance(a.itemtype, EnumField):
        itemtype = a.itemtype.typename

    if a.path in overrides:
        decl = ""  # No declaration if we have an override
        itemtype = overrides[a.path]

    itemtype = typemap.get(itemtype, itemtype)
    defi = f"    #[serde(alias = \"{name}\")]\n    pub {name}: {'Vec<'*a.dims}{itemtype}{'>'*a.dims},\n"

    return (defi, decl)


def gen_composite(c) -> (str, str):
    logger.debug(f"Generating composite field {c.name} ({c.path})")
    fields = []
    for f in c.fields:
        fields.append(gen_field(f))

    r = "".join([f[1] for f in fields])

    r += f"""#[derive(Clone, Debug, Deserialize, Serialize)]\npub struct {c.typename} {{\n"""

    r += "".join([f[0] for f in fields])

    r += "}\n\n"
    return ("", r)


def gen_command(c) -> str:
    """A command is just the a composite type, with no definition, but a declaration."""
    _, decl = gen_composite(c)
    return ("", header + decl)


def gen_rust(command: Command) -> str:
    return gen_command(command)[1]
