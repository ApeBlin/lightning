---
task:
  timeout_in: 120m
  clone_script: |
    if [ -z "$CIRRUS_PR" ]; then
      git clone --recursive --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    else
      git clone --recursive https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    fi
  container:
    dockerfile: contrib/Dockerfile.tester
    cpu: $CPU
    memory: $MEMORY
    use_in_memory_disk: true
  env:
    CPU: 4
    MEMORY: 4G
    matrix:
      # - {TEST_CMD: "make", NO_PYTHON: 1}
      # - {TEST_CMD: "make check-source check-units installcheck", COPTFLAGS: "-O3"}
      # - {ARCH: 32, TEST_CMD: "make check-source check-units installcheck", DEVELOPER: 0}
      # - {TEST_CMD: "make check-source check-units installcheck", EXPERIMENTAL_FEATURES: 1}

      # # All of the following will just run `make pytest`
      # - {COMPILER: clang}
      # - {COMPILER: gcc, TEST_CHECK_DBSTMTS: 1}
      # - {DEVELOPER: 0, COMPAT: 0, TEST_GROUP: 1, TEST_GROUP_COUNT: 2}
      # - {DEVELOPER: 0, COMPAT: 0, TEST_GROUP: 2, TEST_GROUP_COUNT: 2}

      # All of these are pretty slo since they run under valgrind
      - {VALGRIND: 1, TEST_GROUP: 1, TEST_GROUP_COUNT: 10, PYTEST_PAR: 4, CPU: 16, MEMORY: 16G}
      - {VALGRIND: 1, TEST_GROUP: 2, TEST_GROUP_COUNT: 10, PYTEST_PAR: 4, CPU: 16, MEMORY: 16G}
      - {VALGRIND: 1, TEST_GROUP: 3, TEST_GROUP_COUNT: 10, PYTEST_PAR: 4, CPU: 16, MEMORY: 16G}
      - {VALGRIND: 1, TEST_GROUP: 4, TEST_GROUP_COUNT: 10, PYTEST_PAR: 4, CPU: 16, MEMORY: 16G}
      - {VALGRIND: 1, TEST_GROUP: 5, TEST_GROUP_COUNT: 10, PYTEST_PAR: 4, CPU: 16, MEMORY: 16G}
      - {VALGRIND: 1, TEST_GROUP: 6, TEST_GROUP_COUNT: 10, PYTEST_PAR: 4, CPU: 16, MEMORY: 16G}
      - {VALGRIND: 1, TEST_GROUP: 7, TEST_GROUP_COUNT: 10, PYTEST_PAR: 4, CPU: 16, MEMORY: 16G}
      - {VALGRIND: 1, TEST_GROUP: 8, TEST_GROUP_COUNT: 10, PYTEST_PAR: 4, CPU: 16, MEMORY: 16G}
      - {VALGRIND: 1, TEST_GROUP: 9, TEST_GROUP_COUNT: 10, PYTEST_PAR: 4, CPU: 16, MEMORY: 16G}
      - {VALGRIND: 1, TEST_GROUP: 10, TEST_GROUP_COUNT: 10, PYTEST_PAR: 4, CPU: 16, MEMORY: 16G}

      # Various other configurations
      - {NETWORK: liquid-regtest, MEMORY: 8G}
      - {DB: postgres, MEMORY: 8G, PYTEST_PAR: 5}
      # The cross-compiled versions fail on the configurator
      #- {ARCH: arm32v7, TARGET_HOST: arm-linux-gnueabihf}
      #- {ARCH: arm64v8, TARGET_HOST: aarch64-linux-gnu}
      - {EXPERIMENTAL_FEATURES: 1}

  tests_script: |
    echo Running in $(pwd)
    export ARCH=${ARCH:-64}
    export BOLTDIR=lightning-rfc
    export CC=${COMPILER:-gcc}
    export COMPAT=${COMPAT:-1}
    export TEST_CHECK_DBSTMTS=${TEST_CHECK_DBSTMTS:-0}
    export DEVELOPER=${DEVELOPER:-1}
    export EXPERIMENTAL_FEATURES=${EXPERIMENTAL_FEATURES:-0}
    export PATH=$CWD/dependencies/bin:"$HOME"/.local/bin:"$PATH"
    export PYTEST_OPTS="--maxfail=5 --reruns=2 --suppress-no-test-exit-code ${PYTEST_OPTS}"
    export PYTEST_PAR=${PYTEST_PAR:-10}
    export PYTEST_SENTRY_ALWAYS_REPORT=1
    export SLOW_MACHINE=1
    export TEST_CMD=${TEST_CMD:-"make -j $PYTEST_PAR pytest"}
    export TEST_DB_PROVIDER=${DB:-"sqlite3"}
    export TEST_NETWORK=${NETWORK:-"regtest"}
    export TIMEOUT=900
    export VALGRIND=${VALGRIND:-0}

    env

    pip3 install --user -U \
      -r requirements.txt \
      -r contrib/pyln-client/requirements.txt \
      -r contrib/pyln-proto/requirements.txt \
      -r contrib/pyln-testing/requirements.txt

    # Install utilities that aren't dependencies, but make running
    # tests easier/feasible on CI
    pip3 install --user \
      blinker \
      pytest-sentry \
      pytest-rerunfailures==9.1.1 \
      pytest-test-groups==1.0.3 \
      pytest-custom-exit-code==0.3.0

    git clone https://github.com/lightningnetwork/lightning-rfc.git ../lightning-rfc

    git submodule init
    git submodule update
    (cd external/libwally-core/src/; git submodule init; git submodule update)
    git clone https://github.com/lightningnetwork/lightning-rfc.git

    ./configure CC="$CC"
    cat config.vars

    if [ "$TARGET_HOST" == "arm-linux-gnueabihf" ] || [ "$TARGET_HOST" == "aarch64-linux-gnu" ]
    then
      export QEMU_LD_PREFIX=/usr/"$TARGET_HOST"/
      export MAKE_HOST="$TARGET_HOST"
      export BUILD=x86_64-pc-linux-gnu
      export AR="$TARGET_HOST"-ar
      export AS="$TARGET_HOST"-as
      export CC="$TARGET_HOST"-gcc
      export CXX="$TARGET_HOST"-g++
      export LD="$TARGET_HOST"-ld
      export STRIP="$TARGET_HOST"-strip
      export CONFIGURATION_WRAPPER=qemu-"${TARGET_HOST%%-*}"-static

      wget -q https://zlib.net/zlib-1.2.11.tar.gz \
        && tar xf zlib-1.2.11.tar.gz \
        && cd zlib-1.2.11 \
        && ./configure --prefix="$QEMU_LD_PREFIX" \
        && make \
        && sudo make install
        cd .. && rm zlib-1.2.11.tar.gz && rm -rf zlib-1.2.11

      wget -q https://www.sqlite.org/2018/sqlite-src-3260000.zip \
        && unzip -q sqlite-src-3260000.zip \
        && cd sqlite-src-3260000 \
        && automake --add-missing --force-missing --copy || true \
        && ./configure --disable-tcl --enable-static --disable-readline --disable-threadsafe --disable-load-extension --host="$TARGET_HOST" --prefix="$QEMU_LD_PREFIX" \
        && make \
        && sudo make install
        cd .. && rm sqlite-src-3260000.zip && rm -rf sqlite-src-3260000

      wget -q https://gmplib.org/download/gmp/gmp-6.1.2.tar.xz \
        && tar xf gmp-6.1.2.tar.xz \
        && cd gmp-6.1.2 \
        && ./configure --disable-assembly --prefix="$QEMU_LD_PREFIX" --host="$TARGET_HOST" \
        && make \
        && sudo make install
        cd .. && rm gmp-6.1.2.tar.xz && rm -rf gmp-6.1.2

      ./configure CC="$TARGET_HOST-gcc" --enable-static

      make -j32 CC="$TARGET_HOST-gcc" > /dev/null
    else
      eatmydata make -j32
      eatmydata $TEST_CMD
    fi
